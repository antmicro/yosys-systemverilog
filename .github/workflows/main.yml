name: 'main'

on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}-${{inputs.surelog_branch}}
  cancel-in-progress: true

env:
  GHA_CUSTOM_LINE_PREFIX: "â–Œ"

jobs:
  style-check:
    name: Style check
    runs-on: [self-hosted, Linux, X64]
    container: bitnami/git:2.40.1-debian-11-r4

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Sort check
        run: |
          ./.github/scripts/sort_passlists.sh
          if ! git diff --exit-code; then
            echo
            echo "Sort locally using: ./.github/scripts/sort_passlists.sh"
            echo
            false
          fi

  build:
    name: Build
    uses: ./.github/workflows/build.yml
    permissions:
      pull-requests: write

  tests-parsing:
    name: Parsing Tests
    uses: ./.github/workflows/parsing-tests.yml
    permissions:
      pull-requests: write
    with:
      surelog_branch: ${{ inputs.surelog_branch }}
    needs: build

  tests-formal-verification:
    name: Formal Verification Tests
    uses: ./.github/workflows/formal-verification.yml
    needs: build

  tests-bsg-micro-designs-diff:
    name: Diff generated BSG Micro Designs tests
    uses: ./.github/workflows/bsg-test-diff.yml
    needs: build

  tests-ibex:
    name: Ibex Tests
    uses: ./.github/workflows/ibex.yml
    needs: build

  tests-veer:
    name: VeeR Tests
    uses: ./.github/workflows/veer.yml
    needs: build

  tests-blackparrot:
    name: BlackParrot Tests
    uses: ./.github/workflows/blackparrot.yml
    needs: build

  tests-opentitan:
    name: OpenTitan Tests
    uses: ./.github/workflows/opentitan.yml
    needs: build

  release:
    name: Release Package
    needs: build
    runs-on: ubuntu-22.04
    if: ${{github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')}}

    steps:
      - uses: actions/checkout@v2
        with:
         # Download complete repository + tags
         fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Generate tarball and apply TAG
        run: |
          GIT_VERSION=${GIT_VERSION:-$(git rev-parse --short "$GITHUB_SHA")}
          DISTRO_ARCH=$(uname -m)
          DISTRO=$(lsb_release --short --id)
          DISTRO_RELEASE=$(lsb_release --short --release)
          DISTRO_CODENAME=$(lsb_release --short --codename | sed -e's/[^A-Za-z0-9]//g')
          FULL_TARBALL=yosys-uhdm-integration-$GIT_VERSION-$DISTRO-$DISTRO_RELEASE-$DISTRO_CODENAME-$DISTRO_ARCH.tar.gz
          PLUGIN_TARBALL=yosys-uhdm-plugin-$GIT_VERSION-$DISTRO-$DISTRO_RELEASE-$DISTRO_CODENAME-$DISTRO_ARCH.tar.gz
          # Create a tag of form 2021-12-06-ad2466e
          TAG="${TAG:-$(git show -s --date=short --format=%cd-%h)}"
          git tag "$TAG" || true
          echo "TAG=$TAG" >> $GITHUB_ENV
          ls -lah image
          tar -zcvf $FULL_TARBALL image
          tar -zcvf $PLUGIN_TARBALL image/share/yosys/plugins/uhdm.so image/share/yosys/plugins/systemverilog.so install_plugin.sh
      - name: Get PR data
        uses: 8BitJonny/gh-get-current-pr@2.2.0
        with:
          sha: ${{ github.event.pull_request.head.sha }}
        id: release_pr
      - name: Deploy release
        env:
          RELEASE_NAME: >
            ${{ steps.release_pr.outputs.pr_found == 'true'
                &&
                  format('{0}: #{1}: {2}',
                         env.TAG,
                         steps.release_pr.outputs.number,
                         steps.release_pr.outputs.pr_title)
                ||
                  env.TAG }}
          RELEASE_BODY: >
            ${{ steps.release_pr.outputs.pr_found == 'true'
                &&
                  steps.release_pr.outputs.pr_body
                ||
                  '' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: yosys-uhdm-*.tar.gz
          tag: ${{ env.TAG }}
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}
          overwrite: true
          file_glob: true

  install-plugin:
    name: Release Package Installation Test
    runs-on: [self-hosted, Linux, X64]
    container: debian:latest
    needs: release
    env:
      DEBIAN_FRONTEND: noninteractive
      GHA_MACHINE_TYPE: "n2-standard-2"

    steps:
      - name: Install Yosys and dependencies
        run: |
          apt-get update -q
          apt-get upgrade -y
          apt-get install -y \
              curl \
              jq \
              libreadline-dev \
              wget \
              yosys \
              yosys-dev \
              ;
      - name: Download and extract UHDM plugin
        run: |
          curl https://api.github.com/repos/chipsalliance/systemverilog-plugin/releases/latest -L | jq .assets[1] | grep "browser_download_url" | grep -Eo 'https://[^\"]*' | xargs wget -O - | tar -xz
      - name: Install it
        run: |
          ./install_plugin.sh
      - name: Run Yosys and load SystemVerilog plugin
        run: yosys -p "plugin -i systemverilog"
      - name: Run Yosys and load (deprecated) UHDM plugin
        run: yosys -p "plugin -i uhdm"

  # needed for test linting
  upload-event-file:
    name: Upload GHA event file
    runs-on: ubuntu-latest
    steps:
      - run: cp "$GITHUB_EVENT_PATH" ./event.json
      - name: Upload event file as artifact
        uses: actions/upload-artifact@v2
        with:
          name: event.json
          path: event.json
