name: Large Designs Tests

on:
  workflow_call:

env:
  GHA_CUSTOM_LINE_PREFIX: "â–Œ"

jobs:
  ibex_synth:
    name: Ibex (Vivado synthesis)
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:jammy
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: "tools"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev git python3-pip libtinfo5 pkg-config libcairo2-dev
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              UHDM-integration-tests \
              uhdm-tests/ibex/make-env \
              uhdm-tests/ibex/ibex \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Build & Test
        run: |
          source .github/scripts/common.sh
          enable_vivado 2017.2
          pip install virtualenv
          ./UHDM-integration-tests/.github/ci.sh
        env:
          TARGET: uhdm/yosys/synth-ibex-build
          TEST_CASE: tests/ibex

      - uses: actions/upload-artifact@v2
        with:
          name: lowrisc_ibex_top_artya7_surelog_0.1.bit
          path: UHDM-integration-tests/build/lowrisc_ibex_top_artya7_surelog_0.1/synth-vivado/lowrisc_ibex_top_artya7_surelog_0.1.bit

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  ibex_synth_symbiflow:
    name: Ibex (Symbiflow synthesis)
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:jammy
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive
      TEST_CASE: tests/ibex

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev git python3-pip wget
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              UHDM-integration-tests \
              uhdm-tests/ibex/make-env \
              uhdm-tests/ibex/ibex \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Setup build environment
        run: |
          # Environment creation has to be run with one job to avoid race conditions.
          # See: https://github.com/SymbiFlow/make-env/pull/40
          # Even with the fix more jobs doesn't help with anything.
          make -C ./UHDM-integration-tests -j1 TEST=${TEST_CASE} env

      - name: Build & Test
        env:
          TARGET: uhdm/yosys/synth-ibex-symbiflow
        run: ./UHDM-integration-tests/.github/ci.sh

      - uses: actions/upload-artifact@v2
        with:
          name: top_artya7.bit
          path: ./UHDM-integration-tests/build/lowrisc_ibex_top_artya7_surelog_0.1/synth-symbiflow/top_artya7.bit

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  opentitan_9d82960888_synth:
    name: Opentitan 9d82960888 (synthesis)
    runs-on: [self-hosted, Linux, X64]
    # vivado is linked with libraries used in this version of ubuntu
    container: ubuntu:jammy
    if: ${{github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')}}
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: "tools"
      GHA_MACHINE_TYPE: "n2-highmem-8"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev ninja-build srecord libftdi1-dev git python3-pip libtinfo5
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              UHDM-integration-tests \
              uhdm-tests/opentitan/opentitan-9d82960888 \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Build & Test
        run: |
          source .github/scripts/common.sh
          enable_vivado 2017.2
          pip install virtualenv
          ./UHDM-integration-tests/.github/ci.sh
        env:
          TARGET: uhdm/yosys/synth-opentitan-build
          TEST_CASE: tests/opentitan

      - name: Generate AST
        run: |
          FILE_NAME=UHDM-integration-tests/build/lowrisc_systems_top_earlgrey_nexysvideo_0.1/synth-vivado/yosys.log
          start=$(grep -n "AST_MODULE" $FILE_NAME |cut -f1 -d:|head -n 1)
          end=$(grep -n "AST_" $FILE_NAME |cut -f1 -d:|tail -n 1)

          sed -n $start,"$end"p $FILE_NAME > yosys.ast

      - name: Upload AST
        uses: actions/upload-artifact@v2
        if: ${{github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')}}
        with:
          name: opentitan-yosys.ast
          path: yosys.ast

      # # Uncomment when first job on master will pass
      # - name: Download binaries
      #   if: ${{ github.event_name == 'pull_request' }}
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: opentitan-yosys.ast

      # - name: Compare AST
      #   if: ${{ github.event_name == 'pull_request' }}
      #   run: |
      #     mkdir compare
      #     ./github/scripts/compare_ast.py opentitan-yosys.ast yosys.ast

      - uses: actions/upload-artifact@v2
        with:
          name: lowrisc_systems_top_earlgrey_nexysvideo_0.1.bit
          path: UHDM-integration-tests/build/lowrisc_systems_top_earlgrey_nexysvideo_0.1/synth-vivado/lowrisc_systems_top_earlgrey_nexysvideo_0.1.bit

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  opentitan_synth:
    name: Opentitan (synthesis)
    runs-on: [self-hosted, Linux, X64]
    # vivado is linked with libraries used in this version of ubuntu
    container: ubuntu:jammy
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: "tools"
      GHA_MACHINE_TYPE: "n2-highmem-32"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev ninja-build srecord libftdi1-dev git python3-pip libtinfo5
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              UHDM-integration-tests \
              uhdm-tests/opentitan/opentitan \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Build & Test
        run: |
          source .github/scripts/common.sh
          enable_vivado 2017.2
          pip install virtualenv
          ./UHDM-integration-tests/.github/ci.sh
        env:
          TARGET: uhdm/yosys/synth-opentitan-build-tiny
          TEST_CASE: tests/opentitan

      - uses: actions/upload-artifact@v2
        with:
          name: lowrisc_systems_custom_tiny_chip_custom_tiny_nexysvideo_0.1.edif
          path: UHDM-integration-tests/build/lowrisc_systems_custom_tiny_chip_custom_tiny_nexysvideo_0.1/synth-yosys/lowrisc_systems_custom_tiny_chip_custom_tiny_nexysvideo_0.1.edif

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  opentitan_parse_report:
    runs-on: [self-hosted, Linux, X64]
    # vivado is linked with libraries used in this version of ubuntu
    container: ubuntu:jammy
    strategy:
      matrix:
        include:
          - name: full/top-down
            file-name: full
            make-args: 'TOP_DOWN_TEST:=1'
          - name: quick
            file-name: quick
            make-args:
      fail-fast: false
    name: Opentitan parsing (${{ matrix.name }})
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: "tools"
      GHA_MACHINE_TYPE: "n2-highmem-32"
      PARALLEL_JOBS: 32
      # Minimum free RAM (in percents) required to start a test
      MIN_FREE_MEM_TO_START_TEST: 20

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev ninja-build srecord libftdi1-dev git python3-pip libtinfo5 graphviz libgraphviz-dev pkg-config time
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1
          pip install virtualenv

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              UHDM-integration-tests \
              uhdm-tests/opentitan/opentitan \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Create venv
        run: |
          export PATH="$PWD/image/bin:$PATH"
          cd uhdm-tests/opentitan/opentitan_parsing_test

          make gen-opentitan-deps-mk

      - name: Parse OpenTitan components
        run: |
          export PATH="$PWD/image/bin:$PATH"
          source .github/scripts/common.sh
          enable_vivado 2017.2
          cd uhdm-tests/opentitan/opentitan_parsing_test

          make -rR -j${PARALLEL_JOBS:-1} -Otarget \
              ${{ matrix.make-args }} \
              MIN_FREE_MEM_TO_START_TEST:=${MIN_FREE_MEM_TO_START_TEST} \
              test || :

      - name: Summary
        if: ${{ !cancelled() }}
        run: |
          export PATH="$PWD/image/bin:$PATH"
          cd uhdm-tests/opentitan/opentitan_parsing_test
          make summary
          make summary.md
          cat build/results/summary.md > $GITHUB_STEP_SUMMARY
          rm build/results/summary.md
          # Exits with non-zero when there are unexpected passes or fails
          make check-status

      - name: Upload logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: opentitan-logs-${{ matrix.file-name }}
          path: |
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/results
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/*.log
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/*.dot
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/opentitan_deps.mk

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  swerv_synth:
    name: Swerv (synthesis)
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:jammy
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev ninja-build srecord libftdi1-dev git python3-pip
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              UHDM-integration-tests \
              uhdm-tests/swerv/Cores-SweRV \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Build & Test
        run: |
          pip install virtualenv
          ./UHDM-integration-tests/.github/ci.sh
        env:
          TARGET: uhdm/yosys/swerv
          TEST_CASE: tests/swerv

      - uses: actions/upload-artifact@v2
        with:
          name: chipsalliance.org_cores_SweRV_EH1_1.8.edif
          path: UHDM-integration-tests/build/chipsalliance.org_cores_SweRV_EH1_1.8/synth-vivado/chipsalliance.org_cores_SweRV_EH1_1.8.edif

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  blackparrot_synth:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:jammy
    strategy:
      matrix:
        vars: [ {cfg: e_bp_unicore_cfg, machine: n2-highmem-8}, {cfg: e_bp_multicore_1_cfg, machine: n2-highmem-8}, {cfg: e_bp_multicore_1_cce_ucode_cfg, machine: n2-highmem-8}, {cfg: e_bp_multicore_4_cfg, machine: n2-highmem-32}, {cfg: e_bp_multicore_4_cce_ucode_cfg, machine: n2-highmem-32} ]
      fail-fast: false
    name: Black Parrot (${{ matrix.vars.cfg }} - synthesis)
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive
      GHA_MACHINE_TYPE: ${{ matrix.vars.machine }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev ninja-build srecord libftdi1-dev git python3-pip
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              UHDM-integration-tests \
              uhdm-tests/black-parrot/black-parrot \
              ;
          git submodule update --depth 1 --init \
              uhdm-tests/black-parrot/black-parrot-tools \
              uhdm-tests/black-parrot/black-parrot-sdk \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Build & Test
        run: |
          pip install virtualenv
          ./UHDM-integration-tests/.github/ci.sh
        env:
          TARGET: uhdm/yosys/synth-blackparrot-build
          TEST_CASE: tests/black-parrot
          BLACKPARROT_CFG: ${{ matrix.vars.cfg }}

      - uses: actions/upload-artifact@v2
        with:
          name: bp_${{ matrix.vars.cfg }}.edif
          path: UHDM-integration-tests/build/bp_${{ matrix.vars.cfg }}.edif

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg
