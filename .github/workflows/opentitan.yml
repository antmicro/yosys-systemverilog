name: OpenTitan Tests

on:
  workflow_call:

env:
  GHA_CUSTOM_LINE_PREFIX: "â–Œ"

jobs:
  opentitan_9d82960888_synth:
    name: OpenTitan 9d82960888 (synthesis)
    runs-on: [self-hosted, Linux, X64]
    # vivado is linked with libraries used in this version of ubuntu
    container: ubuntu:jammy
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')}}
    env:
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: "tools"
      GHA_MACHINE_TYPE: "n2-highmem-8"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -q
          apt-get install -y \
              ant \
              build-essential \
              cmake \
              default-jre \
              flex \
              git \
              google-perftools \
              libfl-dev \
              libftdi1-dev \
              libgoogle-perftools-dev \
              libtinfo5 \
              ninja-build \
              python3 \
              python3-dev \
              python3-pip \
              srecord \
              swig \
              tcl-dev \
              tclsh \
              uuid \
              uuid-dev \
              ;
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              third_party/opentitan_9d82960888 \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Build & Test
        run: |
          source .github/scripts/common.sh
          enable_vivado 2017.2
          pip install virtualenv
          make -C uhdm-tests uhdm/yosys/synth-opentitan-build TEST=opentitan \
              ENABLE_READLINE=0 PRETTY=0 -j $(nproc)

      - name: Generate AST
        run: |
          FILE_NAME=uhdm-tests/build/lowrisc_systems_top_earlgrey_nexysvideo_0.1/synth-vivado/yosys.log
          start=$(grep -n "AST_MODULE" $FILE_NAME |cut -f1 -d:|head -n 1)
          end=$(grep -n "AST_" $FILE_NAME |cut -f1 -d:|tail -n 1)

          sed -n $start,"$end"p $FILE_NAME > yosys.ast

      - name: Upload AST
        uses: actions/upload-artifact@v2
        if: ${{github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')}}
        with:
          name: opentitan-yosys.ast
          path: yosys.ast

      # # Uncomment when first job on master will pass
      # - name: Download binaries
      #   if: ${{ github.event_name == 'pull_request' }}
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: opentitan-yosys.ast

      # - name: Compare AST
      #   if: ${{ github.event_name == 'pull_request' }}
      #   run: |
      #     mkdir compare
      #     ./github/scripts/compare_ast.py opentitan-yosys.ast yosys.ast

      - uses: actions/upload-artifact@v2
        with:
          name: lowrisc_systems_top_earlgrey_nexysvideo_0.1.bit
          path: uhdm-tests/build/lowrisc_systems_top_earlgrey_nexysvideo_0.1/synth-vivado/lowrisc_systems_top_earlgrey_nexysvideo_0.1.bit

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  opentitan_synth:
    name: OpenTitan (synthesis)
    runs-on: [self-hosted, Linux, X64]
    # vivado is linked with libraries used in this version of ubuntu
    container: ubuntu:jammy
    env:
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: "tools"
      GHA_MACHINE_TYPE: "n2-highmem-32"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -q
          apt-get install -y \
              ant \
              build-essential \
              cmake \
              default-jre \
              flex \
              git \
              google-perftools \
              libfl-dev \
              libftdi1-dev \
              libgoogle-perftools-dev \
              libtinfo5 \
              ninja-build \
              python3 \
              python3-dev \
              python3-pip \
              srecord \
              swig \
              tcl-dev \
              tclsh \
              uuid \
              uuid-dev \
              ;
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              third_party/opentitan \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Build & Test
        run: |
          source .github/scripts/common.sh
          enable_vivado 2017.2
          pip install virtualenv
          make -C uhdm-tests uhdm/yosys/synth-opentitan-build-tiny TEST=opentitan \
              ENABLE_READLINE=0 PRETTY=0 -j $(nproc)

      - uses: actions/upload-artifact@v2
        with:
          name: lowrisc_systems_custom_tiny_chip_custom_tiny_nexysvideo_0.1.edif
          path: uhdm-tests/build/lowrisc_systems_custom_tiny_chip_custom_tiny_nexysvideo_0.1/synth-yosys/lowrisc_systems_custom_tiny_chip_custom_tiny_nexysvideo_0.1.edif

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  opentitan_parse_report:
    runs-on: [self-hosted, Linux, X64]
    # vivado is linked with libraries used in this version of ubuntu
    container: ubuntu:jammy
    strategy:
      matrix:
        include:
          - name: full/top-down
            file-name: full
            make-args: 'TOP_DOWN_TEST:=1'
          - name: quick
            file-name: quick
            make-args:
      fail-fast: false
    name: OpenTitan parsing (${{ matrix.name }})
    env:
      DEBIAN_FRONTEND: noninteractive
      GHA_EXTERNAL_DISK: "tools"
      GHA_MACHINE_TYPE: "n2-highmem-32"
      PARALLEL_JOBS: 32
      # Minimum free RAM (in percents) required to start a test
      MIN_FREE_MEM_TO_START_TEST: 20

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -q
          apt-get install -y \
              ant \
              build-essential \
              cmake \
              default-jre \
              flex \
              git \
              google-perftools \
              graphviz \
              libfl-dev \
              libftdi1-dev \
              libgoogle-perftools-dev \
              libgraphviz-dev \
              libtinfo5 \
              ninja-build \
              pkg-config \
              python3 \
              python3-dev \
              python3-pip \
              srecord \
              swig \
              tcl-dev \
              tclsh \
              time \
              uuid \
              uuid-dev \
              ;
          update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1
          pip install virtualenv

      - name: Checkout submodules
        run: |
          git submodule update --depth 1 --init --recursive \
              third_party/opentitan \
              ;

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Create venv
        run: |
          export PATH="$PWD/image/bin:$PATH"
          cd uhdm-tests/opentitan/opentitan_parsing_test

          make gen-opentitan-deps-mk

      - name: Parse OpenTitan components
        run: |
          export PATH="$PWD/image/bin:$PATH"
          source .github/scripts/common.sh
          enable_vivado 2017.2
          cd uhdm-tests/opentitan/opentitan_parsing_test

          make -rR -j${PARALLEL_JOBS:-1} -Otarget \
              ${{ matrix.make-args }} \
              MIN_FREE_MEM_TO_START_TEST:=${MIN_FREE_MEM_TO_START_TEST} \
              test || :

      - name: Summary
        if: ${{ !cancelled() }}
        run: |
          export PATH="$PWD/image/bin:$PATH"
          cd uhdm-tests/opentitan/opentitan_parsing_test
          make summary
          make summary.md
          cat build/results/summary.md > $GITHUB_STEP_SUMMARY
          rm build/results/summary.md
          # Exits with non-zero when there are unexpected passes or fails
          make check-status

      - name: Upload logs
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: opentitan-logs-${{ matrix.file-name }}
          path: |
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/results
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/*.log
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/*.dot
            ./uhdm-tests/opentitan/opentitan_parsing_test/build/opentitan_deps.mk

      - name: Upload load graphs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg
